"Begin section for pathogen setup
filetype off

filetype plugin indent on
syntax on

"some advice for organizing this file:
"  use sections:
"  - General System-wide
"  - Key-Mappings
"  - Script-specific settings -- ordered by script
"  - Playground for testing out new additions
"

"fix the tabbing
set ts=4 sts=4 sw=4 expandtab

" show trailing chars
set listchars=tab:>~,nbsp:_,trail:.,extends:>,precedes:<
set list

" set undo file
set undofile
set undodir=$HOME/tmp/vimundo

"scroll offset
"

function Tab2spacesFunction()
        :set nopaste
        :retab!
endfunction
command Tab2spaces :call Tab2spacesFunction()
"visual spelling prompting
highlight SpellBad term=standout cterm=bold ctermfg=203 ctermbg=0
highlight SpellLocal term=standout cterm=bold ctermfg=203 ctermbg=0
highlight SpellCap ctermfg=188 ctermbg=234
highlight SpellRare ctermfg=188 ctermbg=234

" Smart indenting
set smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class

" set incremental search, start searching before enter is hit
set incsearch

" hi-light all matches when searching
set hlsearch

set history=100

if &term =~ "xterm\\|rxvt"
  " use an orange cursor in insert mode
  let &t_SI = "\<Esc>]12;orange\x7"
  " use a red cursor otherwise
  let &t_EI = "\<Esc>]12;red\x7"
  silent !echo -ne "\033]12;red\007"
  " reset cursor when vim exits
  autocmd VimLeave * silent !echo -ne "\033]112\007"
  " use \003]12;gray\007 for gnome-terminal and rxvt up to version 9.21
endif

" change cursor shape
if &term =~ '^xterm\\|rxvt'
  " solid underscore
  " let &t_SI .= "\<Esc>[4 q"
  " solid block
  let &t_EI .= "\<Esc>[2 q"
  " 1 or 0 -> blinking block
  " 3 -> blinking underscore
  " Recent versions of xterm (282 or above) also support
  " 5 -> blinking vertical bar
  " 6 -> solid vertical bar
endif

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" Show matching bracket for .5 second -- don't load the annoying, more
" permanent version
set showmatch
set matchtime=5
let loaded_matchparen=1

" Jump to last cursor position unless it's invalid or in an event handler
autocmd BufReadPost *
  \ if line("'\"") > 0 && line("'\"") <= line("$") |
  \   exe "normal g`\"" |
  \ endif
""" shortcuts
"use spell checking with english default
nmap <silent> <Leader>s :set spell<CR>
nmap <silent> <Leader>S :set spell!<CR>

"set paste
nmap <silent> <Leader>p :set paste<CR>
nmap <silent> <Leader>P :set nopaste<CR>

"turn line numbers on and off
nmap <silent> <Leader>n :set nu<CR>
nmap <silent> <Leader>N :set nu!<CR>

" copy and paste
nmap <silent> <Leader>v "+p
nmap <silent> <Leader>V "+P
vmap <Leader>c "+y

" for linux, use
set clipboard=unnamedplus

" format sql
vmap <leader>F :!sqlformat --reindent --keywords upper --identifiers lower<CR>

" convert comma separated list to one element on a line
map <leader>cs :%s/,/\r/g<CR>

set ruler

"set splitting
set splitbelow
set splitright

"use mouse to move the vim split windows; but I'll have to use shift-select to
"be able to copy from terminal
set mouse=a

" More syntax highlighting.
" but use only with .py files
autocmd BufRead,BufNewFile *.py let python_highlight_all=1

" Auto completion via ctrl-space (instead of the nasty ctrl-x ctrl-o)
"set omnifunc=pythoncomplete#Complete
"inoremap <Nul> <C-x><C-o>

"make . command work with visual mode
:xnoremap . :norm.<CR>

set nocompatible

"let @d=':r !date '+%a %d %B %Y''
map <leader>d :r !date '+\%a \%d \%B \%Y' <CR>
map <leader>D <CR><CR><CR>Today:<CR><CR>

"db2commandline-ify a sql statement
" use ctrl-v<escape> to insert this special escape character
let @d='0idb2A;j'

map <leader>f 0idb2<ESC>A;<ESC>j

"make a hash rocket for javascript
nmap <leader>l <space>=><space>


" Clear the search buffer when hitting return
" ..this breaks vimwiki's lopen open mode. return doesn't follow links
" nnoremap <CR> :nohlsearch<cr>
" turn off vim wiki tab control in insert mode, so ultisnips will work
let g:vimwiki_table_mappings = 0

"from gary bernhardt's dotfiles:
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MULTIPURPOSE TAB KEY
" Indent if we're at the beginning of a line. Else, do completion.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction

inoremap <expr> <tab> InsertTabWrapper()
inoremap <s-tab> <c-n>

"This was recommended by Chad at NCLUG, but .. is this better than smartindent
"set autoindent 
"set expandtab 

"set so 07 increments like it's not in hex
"set nrformats=alpha

" combine lines with context-aware formatting
set formatoptions+=j

"expand all sections when opening python code
autocmd Syntax python normal zR

"wrap code lines..so you can see what's going on.
autocmd FileType python set nonumber wrap


""turn on only pylint via syntastic
""" I turned this off so I don't get so many msgs and conflicts with pymode
""let g:syntastic_python_checkers=['pylint']
"let g:syntastic_javascript_checkers=['eslint']
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*

"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"" let g:syntastic_check_on_open = 1
"" setting this to zero because of conflicts with vimwiki's VWS, q.v. Issue
"" #350
"let g:syntastic_check_on_open = 0
"let g:syntastic_check_on_wq = 0


" use ale for syntax checking
let g:ale_linters = {'javascript': ['eslint']}
let g:ale_lint_on_text_changed = 'normal'
" let g:ale_lint_on_insert_leave = 1
" lint only on save file
let g:ale_lint_on_text_changed = 'never'
" don't lint when opening a file
let g:ale_lint_on_enter = 0
" let g:ale_pattern_options = {'.*\.gem.*\.rb$|.*\.rubies.*\.rb$': {'ale_enabled': 0}}
let g:ale_set_highlights = 0
" Set this. Airline will handle the rest.
let g:airline#extensions#ale#enabled = 1
" navigate between ale errors
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)
" quick fix activation
" let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1
" Show 5 lines of errors (default: 10)
let g:ale_list_window_size = 5

"-----
" I"m switching from pymode to jedi
""let g:pymode_lint_ignore = "E501,E2,W"
""remove warnings on line length
"let g:pymode_lint_ignore = "E501"

"" use PEP8 compatible python indent
"let g:pymode_indent = 1
"" stop the slow self. typing that seems to be happening
"let g:pymode_rope_lookup_project = 0

"" Turn on the rope script (1 on, 0 off)
"let g:pymode_rope = 0


"" Turn off the highlighting of the max length column
"let g:pymode_options_colorcolumn = 0

"" Turn off the highlighting of the max length column
"let g:pymode_options_max_line_length = 120

" Vimwiki stuff
" Use folding (i.e. my files aren't that big)
set foldmethod=indent
let g:vimwiki_folding = 1

" convert vimwiki to HTML
:nmap <Leader>wc <Plug>Vimwiki2HTML


" create a table to edit
map <Leader>T :VimwikiTable<CR>

" set the colorschemes
"syntax enable
set background=dark
"colorscheme solarized
"colorscheme zenburn
"colorscheme ir_black
"colorscheme distinguished  "requires 256 terminal
"colorscheme PaperColor
" colorscheme grb256

" use blowfish for encryption
set cm=blowfish2


" turn on paste, paste stuff from the system clipboard, turn off paste
"map <leader>W set paste; i<C-V>; set nopaste
"map <Leader>W :set paste<CR>o<esc>"*]p:set nopaste<cr>
map <Leader>W :set paste<CR>i<C-V><esc>:set nopaste<cr>

" Ctrl-P for directory navigation
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mod = 'ra'
" ignore these files as I'm probably not editing them
set wildignore+=*/tmp/*,*.so,*.swp,*.zip

" remove markdown and text whitespace
autocmd BufWritePre *.md :%s/\s\+$//e
autocmd BufWritePre *.txt :%s/\s\+$//e
autocmd BufWritePre *.wiki :%s/\s\+$//e
autocmd BufWritePre *.html :%s/\s\+$//e


" UlitiSnips settings

let g:ultisnips_python_style="google"
let g:ultisnips_python_triple_quoting_style=1
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
"if you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
map <Leader>u :UltiSnipsEdit<cr>

" airline settings
"   show branch in version control system
let g:airline#extensions#branch#use_vcscommand = 1
let g:airline_powerline_fonts = 1
let g:AirlineTheme='PaperColor'

" signify settings
let g:signify_vcs_list = [ 'git', 'hg' ]


" Put these lines at the very end of your vimrc file.

" Load all plugins now.
" Plugins need to be added to runtimepath before helptags can be generated.
packloadall
" Load all of the helptags now, after plugins have been loaded.
" All messages and errors will be ignored.
silent! helptags ALL
